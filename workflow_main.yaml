# This is a sample workflow for my reference

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    paths-ignore:
      - 'kube/*'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'kube/*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    #strategy:
    #  fail-fast: false
    #  matrix:
    #    language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more:
        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v4
        with:
          repositories: '[{ "id": "central", "url": "https://repo1.maven.org/maven2" },{ "id": "github", "url": "https://maven.pkg.github.com/rakesh635/*" }]'
          servers: '[{ "id": "github", "username": "rakesh635", "password": "${{ secrets.TOKEN_GITHUB }}" }]'
      #- name: CodeQualityCheck
      #  run: mvn sonar:sonar -Dsonar.projectKey=addressBook -Dsonar.host.url=${{ secrets.DEV_SONARQUBEURL }} -Dsonar.login=${{ secrets.DEV_SONARQUBETOKEN }}
      - name: Run Insider (SAST)
        uses: insidersec/insider-action@v0
        with:
            technology: java
            # Relative path under $GITHUB_WORKSPACE to use as a target
            # In this example, will use $GITHUB_WORKSPACE/src as a target
            target: src
    
      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: java
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

          # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
          # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

        # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
        # üìö https://git.io/JvXDl

        # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
        #    and modify them (or add more) to build your code if your project
        #    uses a compiled language

        #- run: |
        #   make bootstrap
        #   make release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Unit Test
        run: |
          pwd
          mvn test --file pom.xml
      - name: Build with Maven
        run: mvn -B package --file pom.xml 
      - name: Setting
        run: mvn help:effective-settings
      - name: Publish Package
        run: mvn clean deploy
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Generate build number
        id: buildnumber
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.TOKEN_GITHUB}}        
      - name: Print new build number
        run: echo "Build number is $BUILD_NUMBER"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: rakesh635/addressbook:latest,rakesh635/addressbook:${{ steps.buildnumber.outputs.build_number }}
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.Terraform_githubtoken }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: terraform
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: terraform
      run: |
        pwd
        terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -no-color
      continue-on-error: true
      
    - uses: actions/github-script@0.9.0
      #if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      #if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
